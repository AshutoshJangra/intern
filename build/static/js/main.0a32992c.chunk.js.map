{"version":3,"sources":["firebase/config.js","services/auth-service.js","services/axios-service.js","hooks/useStorage.js","App.js","reportWebVitals.js","index.js"],"names":["firebaseApp","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getStorage","tokenKey","localStorage","getItem","this","token","jwt","JSON","parse","console","log","setItem","stringify","removeItem","exp","decode","moment","isBefore","getExpiration","getToken","isValid","axiosInstance","initInstance","axios","create","baseURL","timeout","interceptors","request","use","config","authService","headers","Authorization","getInstance","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ofAaMA,EAAcC,YAVG,CACrBC,OAAQ,0CACRC,WAAY,+BACZC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8C,GAMcC,YAAWR,G,gDC2BnB,M,iDAtCbS,SAAW,a,4CAEX,WACE,OAAOC,aAAaC,QAAQC,KAAKH,Y,oBAKnC,SAAOI,GACL,OAAOC,SAAWC,KAAKC,MAAMH,M,uBAG/B,SAAUA,GACRI,QAAQC,IAAIL,GACZH,aAAaS,QAAQP,KAAKH,SAAUM,KAAKK,UAAUP,EAAMA,U,4BAG3D,WACEH,aAAaW,WAAWT,KAAKH,Y,2BAG/B,SAAcI,GACZ,IAAMS,EAAMV,KAAKW,OAAOV,GAAOS,IAE/B,OAAOE,OAAYF,K,qBAGrB,SAAQT,GACN,OAAOW,IAASC,SAASb,KAAKc,cAAcb,M,6BAG9C,WACE,IAAMA,EAAQD,KAAKe,WAEnB,SAAOd,IAASD,KAAKgB,QAAQf,Q,UCJlB,I,WA5Bb,aAAe,yBAFfgB,cAAgB,GAGdjB,KAAKkB,e,gDAGP,WAgBE,OAfAlB,KAAKiB,cAAgBE,IAAMC,OAAO,CAChCC,QAAS,UACTC,QAAS,MAGXtB,KAAKiB,cAAcM,aAAaC,QAAQC,KAAI,SAACC,GAC3C,IAAMzB,EAAQ0B,EAAYZ,WAM1B,OAJId,IACFyB,EAAOE,QAAQC,cAAf,iBAAyC5B,IAGpCyB,KAGF1B,KAAKiB,gB,yBAGd,WACE,OAAOjB,KAAKiB,eAAiBjB,KAAKkB,mB,OCzBHY,c,OCgBpBC,MAhBf,WAKE,OACE,qBAAKC,UAAU,MAAf,SACE,+BACA,wBAAQA,UAAU,oBCDTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0a32992c.chunk.js","sourcesContent":["import {initializeApp} from \"firebase/app\";\r\nimport {getStorage ,ref , uploadBytesResumable, getDownloadURL} from 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCPcL3DmxrQxGsVvTeABfdD8ExghVuKXi4\",\r\n  authDomain: \"intern-b5c3a.firebaseapp.com\",\r\n  projectId: \"intern-b5c3a\",\r\n  storageBucket: \"intern-b5c3a.appspot.com\",\r\n  messagingSenderId: \"100729861313\",\r\n  appId: \"1:100729861313:web:f561620ba50e6c60895040\"\r\n};\r\n\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = getStorage(firebaseApp);\r\n\r\nexport {projectStorage , ref ,uploadBytesResumable, getDownloadURL};","import * as jwt from \"jsonwebtoken\";\r\nimport * as moment from \"moment\";\r\n\r\nclass AuthService {\r\n  tokenKey = \"auth_token\";\r\n\r\n  getToken() {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n\r\n\r\n  decode(token) {\r\n    return jwt.decode(JSON.parse(token));\r\n  }\r\n\r\n  saveToken(token) {\r\n    console.log(token);\r\n    localStorage.setItem(this.tokenKey, JSON.stringify(token.token));\r\n  }\r\n\r\n  invalidateUser() {\r\n    localStorage.removeItem(this.tokenKey);\r\n  }\r\n\r\n  getExpiration(token) {\r\n    const exp = this.decode(token).exp;\r\n\r\n    return moment.unix(exp);\r\n  }\r\n\r\n  isValid(token) {\r\n    return moment().isBefore(this.getExpiration(token));\r\n  }\r\n\r\n  isAuthenticated() {\r\n    const token = this.getToken();\r\n\r\n    return token && this.isValid(token) ? true : false;\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import axios from \"axios\";\r\nimport authService from \"./auth-service\";\r\n\r\nclass AxiosService {\r\n  axiosInstance = {};\r\n\r\n  constructor() {\r\n    this.initInstance();\r\n  }\r\n\r\n  initInstance() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: \"/api/v1\",\r\n      timeout: 2000,\r\n    });\r\n\r\n    this.axiosInstance.interceptors.request.use((config) => {\r\n      const token = authService.getToken();\r\n\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n\r\n      return config;\r\n    });\r\n\r\n    return this.axiosInstance;\r\n  }\r\n\r\n  getInstance() {\r\n    return this.axiosInstance || this.initInstance();\r\n  }\r\n}\r\n\r\nexport default new AxiosService();\r\n","import { updateMetadata } from '@firebase/storage';\r\nimport React, { useState, useEffect } from 'react'\r\nimport {projectStorage , ref , uploadBytesResumable, getDownloadURL} from '../firebase/config';\r\nimport axiosService from \"../services/axios-service\";\r\n\r\nconst axiosInstance = axiosService.getInstance();\r\n\r\n\r\nconst useStorage =(file , btn)=> {\r\n    const [progress , setProgress] = useState(0);\r\n    const [error , setError] = useState(\"\");\r\n    const [url , setUrl] = useState(\"\");\r\n\r\n    console.log(\"in ss:\", file);\r\n    async function updateData(url , name) {\r\n        const data = {\r\n            name,\r\n            link:url\r\n        }\r\n        console.log(data);\r\n        const response = await axiosInstance.put('/api/v1/files/update',data) ;\r\n    \r\n        await response.data;\r\n        \r\n        console.log(\"response: \" , response.data);\r\n      }\r\n    async function postData(url , name) {\r\n        const data = {\r\n            name,\r\n            link:url\r\n        }\r\n        console.log(data);\r\n        const response = await axiosInstance.post('/api/v1/files/upload',data) ;\r\n    \r\n        await response.data;\r\n        \r\n        console.log(\"response: \" , response.data);\r\n      }\r\n\r\n    useEffect(()=>{\r\n        const storageRef = ref(projectStorage ,file.data.name);\r\n        const name = file.data.name ;\r\n        const uploadTask = uploadBytesResumable(storageRef , file.data);\r\n        uploadTask.on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100 ;\r\n            setProgress(percentage);\r\n        },(err)=>{\r\n            setError(err);\r\n        },()=>{\r\n            getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n            setUrl(url);\r\n            if(file.btn === \"file\"){\r\n                postData(downloadURL , name);\r\n            }else{\r\n                updateData(downloadURL , file.btn);\r\n            }\r\n        })}\r\n    )},[file])\r\n\r\n    return {progress , error , url}\r\n}\r\n\r\nexport default useStorage;","import './App.css';\nimport React, { useState } from 'react'\n\nimport Progress from './components/Progress';\n\nfunction App() {\n  \n\n  \n\n  return (\n    <div className=\"App\">\n      <form > \n      <header className=\"App-header\">\n      \n      </header>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}